From 849fbf883b8a28f556d28d14670855508066f7a9 Mon Sep 17 00:00:00 2001
From: Ido Reis <idor@ti.com>
Date: Tue, 14 Feb 2012 18:07:42 +0200
Subject: [PATCH] added exec procedure

Signed-off-by: Ido Reis <idor@ti.com>
---
 init/builtins.c |    2 +-
 init/init.c     |   48 ++++++++++++++++++++++++++++++++++++++++++++++++
 init/init.h     |    1 +
 3 files changed, 50 insertions(+), 1 deletions(-)

diff --git a/init/builtins.c b/init/builtins.c
index eccda3f..c51472b 100644
--- a/init/builtins.c
+++ b/init/builtins.c
@@ -176,7 +176,7 @@ int do_domainname(int nargs, char **args)
 
 int do_exec(int nargs, char **args)
 {
-    return -1;
+    return exec_command(nargs,args);
 }
 
 int do_export(int nargs, char **args)
diff --git a/init/init.c b/init/init.c
index d10ca47..3d786f4 100755
--- a/init/init.c
+++ b/init/init.c
@@ -143,6 +143,54 @@ static void publish_socket(const char *name, int fd)
     fcntl(fd, F_SETFD, 0);
 }
 
+int exec_command(int nargs, char **args)
+{
+	pid_t pid;
+
+	if ( nargs == 0 || args == NULL ) return -1;
+
+	++args; //step over "exec"
+
+	NOTICE("executing '%s'\n", args[0]);
+
+	pid = fork();
+
+    if (pid == -1) {
+		ERROR("cannot fork child while trying to exec %s",args[0]);
+		return -2;
+	}
+
+	if (pid == 0) {
+		FILE* f;
+		char tmp[32];
+		int fd,sz;
+		get_property_workspace(&fd, &sz);
+		sprintf(tmp, "%d,%d", dup(fd), sz);
+		add_environment("ANDROID_PROPERTY_WORKSPACE", tmp);
+		setpgid(0, getpid());
+		if (execve(args[0], (char**) args, (char**) ENV) < 0) {
+			ERROR("cannot execve('%s'): %s\n", args[0], strerror(errno));
+		}
+		_exit(127);
+	}
+
+	int status;
+	int time_spent=0;
+
+	while (waitpid(pid, &status, WNOHANG) == 0 && time_spent < 60) {
+		sleep(1);
+		++time_spent;
+	}
+
+	if ( time_spent >= 60 && waitpid(pid, &status, WNOHANG) == 0 ) {
+		ERROR("timeout reached for %s",args[0]);
+		kill( pid, SIGKILL );
+		return -3;
+	}
+	return WEXITSTATUS(status);
+}
+
+
 void service_start(struct service *svc, const char *dynamic_args)
 {
     struct stat s;
diff --git a/init/init.h b/init/init.h
index a91d9d4..8b9988c 100644
--- a/init/init.h
+++ b/init/init.h
@@ -123,6 +123,7 @@ void service_for_each_class(const char *classname,
                             void (*func)(struct service *svc));
 void service_for_each_flags(unsigned matchflags,
                             void (*func)(struct service *svc));
+int exec_command(int nargs, char **args);
 void service_stop(struct service *svc);
 void service_reset(struct service *svc);
 void service_start(struct service *svc, const char *dynamic_args);
-- 
1.7.0.4

